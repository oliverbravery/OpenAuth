from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

class DBCollection(Enum):
    """
    Enum class for the database collections
    """
    AUTHORIZATION = "authorization"
    ACCOUNTS = "accounts"
    CLIENTS = "clients"
    
class AccountRole(str, Enum):
    """
    Enum class for representing the different roles an account can have
    """
    STANDARD = "standard"
    DEVELOPER = "developer"
    
class DeveloperScope(str, Enum):
    """
    Enum class for the different developer scopes
    """
    READ_PROFILE = "read:profile"
    WRITE_PROFILE = "write:profile"
    DELETE_PROFILE = "delete:profile"
    READ_CLIENT = "read:client"
    WRITE_CLIENT = "write:client"
    DELETE_CLIENT = "delete:client"
    
class ClientDeveloper(BaseModel):
    """
    Represents what scopes a developer has access to for a client.
    
    Args:
        username (str): The unique username of the developer.
        scopes (List[DeveloperScope]): The scopes that the developer has access to for the client.
    """
    username: str
    scopes: List[DeveloperScope]

class Client(BaseModel):
    """
    Represents a registered application in the auth service. 
    A client is an application that can request access to a user's account and store application-specific data in the user's profile.
    
    Args:
        client_id (str): The unique attribute used to identify and differentiate applications.
        client_secret (str): A long random string that is used to authenticate the application.
        name (str): The name of the application.
        description (str): A description of the application and why it needs access to certain scopes.
        redirect_uri (str): The URI to which the user is redirected after granting or denying access to the application.
        developers (List[ClientAdmin]): The list of developers that have access to the client.
        scopes (dict[str,str]): The scopes of the client mapped to a description of the scope.
    """
    client_id: str
    client_secret: str
    name: str
    description: str
    redirect_uri: str
    developers: List[ClientDeveloper] = []
    scopes: dict[str, str] = {}
    
class Profile(BaseModel):
    """
    Represents a profile for an app stored in the user's account.

    Args:
        client_id (str): The client_id of the application associated with the profile.
        role (str): The role of the user according to the application.
        scopes (List[str]): The scopes that the application is allowed to access.
    """
    client_id: str
    role: str
    scopes: List[str] = []
    
class Account(BaseModel):
    """
    Represents a user account in the auth service.

    Args:
        username (str): The unique username of the user.
        display_name (str): The display name of the user.
        email (str): The email of the user.
        hashed_password (str): The hashed password of the user.
        hashed_totp_pin (Optional[str]): The hashed TOTP pin of the user.
        profiles (List[Profile]): The profiles associated with the user.
        account_role (AccountRole): The role of the user in the auth service. Defaults to 'standard'.
    """
    username: str
    display_name: str
    email: str
    hashed_password: str
    hashed_totp_pin: Optional[str] = None
    profiles: List[Profile] = []
    account_role: AccountRole = AccountRole.STANDARD
    
    def get_profile(self, client_id: str) -> Optional[Profile]:
        """
        Get the profile of the user for the given application.

        Args:
            client_id (str): The client_id of the application.

        Returns:
            Optional[Profile]: The profile of the user for the given application. None if the profile does not exist.
        """
        profile_search: list[Profile] = [profile for profile in self.profiles if profile.client_id == client_id]
        return profile_search[0] if len(profile_search)>0 else None
    
class Authorization(BaseModel):
    """
    Represents temporary authorization data for users.

    Args:
        username (str): The username of the user.
        code_challenge (Optional[str]): A challenge generated by the user for PKCE.
        auth_code (Optional[str]): The temporary code challenge generated by the auth service for PKCE.
        hashed_refresh_token (Optional[str]): The hashed refresh token generated by the auth service.
    """
    username: str
    code_challenge: Optional[str] = None
    auth_code: Optional[str] = None
    hashed_refresh_token: Optional[str] = None